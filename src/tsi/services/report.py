"""Report generation service for exporting analytics."""

import base64

import pandas as pd
import plotly.graph_objects as go

from tsi.models.schemas import AnalyticsMetrics


def generate_markdown_report(
    metrics: AnalyticsMetrics,
    insights: list[str],
    correlations: pd.DataFrame,
    top_priority: pd.DataFrame,
    conflicts: pd.DataFrame,
) -> str:
    """
    Generate a comprehensive Markdown report.

    Args:
        metrics: Computed analytics metrics
        insights: List of insight strings
        correlations: Correlation matrix
        top_priority: Top observations by priority
        conflicts: Conflicting observations

    Returns:
        Markdown-formatted report as string
    """
    report = f"""# Telescope Scheduling Intelligence Report

## Executive Summary

- **Total Observations**: {metrics.total_observations:,}
- **Scheduled**: {metrics.scheduled_count:,} ({metrics.scheduling_rate * 100:.1f}%)
- **Unscheduled**: {metrics.unscheduled_count:,}
- **Mean Priority**: {metrics.mean_priority:.2f}
- **Total Visibility Hours**: {metrics.total_visibility_hours:,.0f}
- **Mean Requested Hours**: {metrics.mean_requested_hours:.2f}

## Key Insights

"""

    for insight in insights:
        report += f"- {insight}\n"

    report += "\n## Priority Statistics\n\n"
    report += f"- **Overall Mean Priority**: {metrics.mean_priority:.2f}\n"
    report += f"- **Median Priority**: {metrics.median_priority:.2f}\n"
    report += f"- **Scheduled Mean Priority**: {metrics.mean_priority_scheduled:.2f}\n"
    report += f"- **Unscheduled Mean Priority**: {metrics.mean_priority_unscheduled:.2f}\n"

    if not correlations.empty:
        report += "\n## Correlation Analysis (Spearman)\n\n"
        report += correlations.to_markdown()
        report += "\n"

    if not top_priority.empty:
        report += "\n## Top 10 Observations by Priority\n\n"
        report += top_priority.to_markdown(index=False)
        report += "\n"

    if not conflicts.empty:
        report += f"\n## ⚠️ Scheduling Conflicts ({len(conflicts)})\n\n"
        report += conflicts.to_markdown(index=False)
        report += "\n"

    report += "\n---\n\n"
    report += "*Generated by Telescope Scheduling Intelligence*\n"

    return report


def figure_to_base64(fig: go.Figure) -> str:
    """
    Convert Plotly figure to base64-encoded PNG.

    Args:
        fig: Plotly figure

    Returns:
        Base64-encoded PNG string
    """
    try:
        img_bytes = fig.to_image(format="png", width=800, height=600)
        return base64.b64encode(img_bytes).decode()
    except Exception:
        # If image export fails (requires kaleido), return empty string
        return ""


def generate_html_report(
    metrics: AnalyticsMetrics,
    insights: list[str],
    correlations: pd.DataFrame,
    top_priority: pd.DataFrame,
    conflicts: pd.DataFrame,
    figures: dict[str, go.Figure] | None = None,
) -> str:
    """
    Generate an HTML report with embedded charts.

    Args:
        metrics: Computed analytics metrics
        insights: List of insight strings
        correlations: Correlation matrix
        top_priority: Top observations by priority
        conflicts: Conflicting observations
        figures: Optional dict of figure name -> Plotly figure

    Returns:
        HTML-formatted report as string
    """
    # Start with markdown content
    md_content = generate_markdown_report(metrics, insights, correlations, top_priority, conflicts)

    # Convert markdown to HTML (simple conversion)
    html_content = md_content.replace("\n## ", "\n<h2>").replace("</h2>", "</h2>\n")
    html_content = html_content.replace("\n# ", "\n<h1>").replace("</h1>", "</h1>\n")
    html_content = html_content.replace("\n- ", "\n<li>").replace("</li>", "</li>\n")
    html_content = html_content.replace("**", "<strong>").replace("</strong>", "</strong>")

    html = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Telescope Scheduling Intelligence Report</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
            color: #333;
        }}
        h1 {{
            color: #1f77b4;
            border-bottom: 2px solid #1f77b4;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #2c3e50;
            margin-top: 30px;
        }}
        table {{
            border-collapse: collapse;
            width: 100%;
            margin: 20px 0;
        }}
        th, td {{
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }}
        th {{
            background-color: #f0f2f6;
            font-weight: bold;
        }}
        tr:nth-child(even) {{
            background-color: #f9f9f9;
        }}
        .chart {{
            margin: 20px 0;
            text-align: center;
        }}
        .chart img {{
            max-width: 100%;
            height: auto;
        }}
    </style>
</head>
<body>
{html_content}
"""

    # Add embedded figures if provided
    if figures:
        html += "\n<h2>Visualizations</h2>\n"
        for name, fig in figures.items():
            img_b64 = figure_to_base64(fig)
            if img_b64:
                html += '<div class="chart">\n'
                html += f"<h3>{name}</h3>\n"
                html += f'<img src="data:image/png;base64,{img_b64}" alt="{name}">\n'
                html += "</div>\n"

    html += """
</body>
</html>
"""

    return html
